package main

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"
	stdlog "log"
	"github.com/eawsy/aws-lambda-go-net/service/lambda/runtime/net"
	"github.com/eawsy/aws-lambda-go-net/service/lambda/runtime/net/apigatewayproxy"
	"github.com/go-kit/kit/log"
	"github.com/slotix/dataflowkit/server"
)

var Handler apigatewayproxy.Handler

func init() {
	Handler = NewHandler()
}

func NewHandler() apigatewayproxy.Handler {
	ctx := context.Background()
	errChan := make(chan error)
	// Logging domain.
	var logger log.Logger
	{
		logger = log.NewLogfmtLogger(os.Stderr)
		//logger = log.With(logger, "ts", log.DefaultTimestampUTC)
		logger = log.With(logger, "ts", time.Now().Format("Jan _2 15:04:05"))
		logger = log.With(logger, "caller", log.DefaultCaller)
	}

	var svc server.Service
	svc = server.ParseService{}
	//svc = ProxyingMiddleware(ctx, "http://127.0.0.1:8000")(svc)
	//svc = StatsMiddleware("18")(svc)
	//svc = CachingMiddleware()(svc)

	//svc = ProxyingMiddleware(ctx, viper.GetString("proxy"))(svc)

	//svc = LoggingMiddleware(logger)(svc)
	//svc = RobotsTxtMiddleware()(svc)
	endpoints := server.Endpoints{
		FetchEndpoint: server.MakeFetchEndpoint(svc),
		ParseEndpoint: server.MakeParseEndpoint(svc),
	}
	r := server.MakeHttpHandler(ctx, endpoints, logger)

	ln := net.Listen()
	handle := apigatewayproxy.New(ln, nil).Handle
	//go http.Serve(ln, http.HandlerFunc(handle))
	//go http.Serve(ln, r)
	// HTTP transport
	go func() {
		errChan <- http.Serve(ln, r)
	}()
	go func() {
		c := make(chan os.Signal, 1)
		signal.Notify(c, syscall.SIGINT, syscall.SIGTERM)
		errChan <- fmt.Errorf("%s", <-c)
	}()
	stdlog.Println(<-errChan)
	return handle
}

/*
func handle(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte("Hello, World!"))
}
*/
