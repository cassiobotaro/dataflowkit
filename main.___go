// Copyright Â© 2017 Slotix s.r.o. <dm@slotix.sk>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
package main

import (
	"flag"
	"fmt"

	machinery "github.com/RichardKnop/machinery/v1"
	"github.com/RichardKnop/machinery/v1/config"
	"github.com/RichardKnop/machinery/v1/errors"
	"github.com/RichardKnop/machinery/v1/signatures"
	"github.com/RichardKnop/machinery/v1/logger"
)

// Define flagss
var (
	configPath    = flag.String("c", "config.yml", "Path to a configuration file")
	broker        = flag.String("b", "redis://127.0.0.1:6379", "Broker URL")
	resultBackend = flag.String("r", "redis://127.0.0.1:6379", "Result backend")

	cnf                                             config.Config
	server                                          *machinery.Server
	task0, task1, task2, task3, task4, task5, task6 signatures.TaskSignature
)

func init() {
	// Parse the flags
	flag.Parse()

	cnf = config.Config{
		Broker:        *broker,
		ResultBackend: *resultBackend,
	}

	// Parse the config
	// NOTE: If a config file is present, it has priority over flags
	data, err := config.ReadFromFile(*configPath)
	if err == nil {
		err = config.ParseYAMLConfig(&data, &cnf)
		errors.Fail(err, "Could not parse config file")
	}

	server, err = machinery.NewServer(&cnf)
	errors.Fail(err, "Could not initialize server")
}

func initTasks() {
	task0 = signatures.TaskSignature{
		Name: "GetHTML",
		Args: []signatures.TaskArg{
			{
				Type:  "string",
				Value: "http://skincrafter.com",
			},
		},
	}

	task1 = signatures.TaskSignature{
		Name: "GetHTML",
		Args: []signatures.TaskArg{
			{
				Type:  "string",
				Value: "http://google.com",
			},
		},
	}

	task2 = signatures.TaskSignature{
		Name: "GetHTML",
		Args: []signatures.TaskArg{
			{
				Type:  "string",
				Value: "http://dbconvert.com",
			},
		},
	}

	task3 = signatures.TaskSignature{
		Name: "GetHTML",
		Args: []signatures.TaskArg{
			{
				Type:  "string",
				Value: "http://yahoo.com",
			},
		},
	}

	task4 = signatures.TaskSignature{
		Name: "GetHTML",
		Args: []signatures.TaskArg{
			{
				Type:  "string",
				Value: "http://diesel.elcat.kg",
			},
		},
	}

	task5 = signatures.TaskSignature{
		Name: "GetHTML",
		Args: []signatures.TaskArg{
			{
				Type:  "string",
				Value: "http://dataflowkittt.org",
			},
		},
	}
}

func main() {

	/*
	 * First, let's try sending a single task
	 */
	initTasks()
	fmt.Println("Send tasks:")

	group := machinery.NewGroup(&task0, &task1, &task2, &task3, &task4, &task5)

	asyncResults, err := server.SendGroup(group)
	errors.Fail(err, "Could not send task")
	

	for _, asyncResult := range asyncResults {
		_, err := asyncResult.Get()
		taskState := asyncResult.GetState()
		fmt.Printf("Current state of %v task is: %s\n", taskState.TaskUUID, taskState.State)
		//asyncResult.Get()
		//	errors.Fail(err, "Getting task state failed with error")
		fmt.Printf(
			"%v  = %v\n",
			asyncResult.Signature.Args[0].Value,
			err, //result.Interface(),
		)
	}

}

/*
package main

import (
	"fmt"

	"github.com/slotix/dfk-parser/cmd"


)

var VERSION = "0.1"
var buildTime = "No buildstamp"

//var githash = "No githash"

func main() {
	version := fmt.Sprintf("%s\nBuild time: %s\n", VERSION, buildTime)
	cmd.Execute(fmt.Sprintf(version))

}
*/
